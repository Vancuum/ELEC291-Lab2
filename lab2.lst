0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P1.1 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             14   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             15   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             16   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             17   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             18   
0000             19   ;Symbolic constants for pushbuttons on breadboard
0000             20   BOOT_BUTTON   equ P4.5
0000             21   SOUND_OUT     equ P0.2
0000             22   HRS_UP        equ P2.0
0000             23   MINS_UP            equ P2.3
0000             24   SECS_UP            equ P2.5
0000             25   ALRM_MINS_UP  equ P0.3
0000             26   ALRM_HRS_UP   equ P0.6
0000             27   ALRM_SET      equ P1.3
0000             28   
0000             29   ; Reset vector
0000             30   org 0x0000
0000 020187      31       ljmp main
0003             32   
0003             33   ; External interrupt 0 vector (not used in this code)
0003             34   org 0x0003
0003 32          35            reti
0004             36   
0004             37   ; Timer/Counter 0 overflow interrupt vector
000B             38   org 0x000B
000B 020115      39            ljmp Timer0_ISR
000E             40   
000E             41   ; External interrupt 1 vector (not used in this code)
0013             42   org 0x0013
0013 32          43            reti
0014             44   
0014             45   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             46   org 0x001B
001B 32          47            reti
001C             48   
001C             49   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             50   org 0x0023 
0023 32          51            reti
0024             52            
0024             53   ; Timer/Counter 2 overflow interrupt vector
002B             54   org 0x002B
002B 020131      55            ljmp Timer2_ISR
002E             56            
002E             57   
002E             58   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             59   dseg at 0x30
0030             60   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             61   ;BCD counters to store the current time
0032             62   BCD_hrs: ds 1
0033             63   BCD_secs:  ds 1
0034             64   BCD_mins: ds 1 
0035             65   ;BCD counters to store the time the alarm is set to
0035             66   alarm_hrs: ds 1
0036             67   alarm_mins: ds 1
0037             68   
0037             69   
002E             70   cseg
002E             71   ; These 'equ' must match the hardware wiring
002E             72   LCD_RS equ P3.2
002E             73   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             74   LCD_E  equ P3.3
002E             75   LCD_D4 equ P3.4
002E             76   LCD_D5 equ P3.5
002E             77   LCD_D6 equ P3.6
002E             78   LCD_D7 equ P3.7
002E             79   
002E             80   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
002E             81   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             82   bseg
0000             83   one_second_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             84   morning_flag: dbit 1 ;Set to one if it is the morning
0002             85   alarm_flag: dbit 1 ;Set to one if the alarm functionality is turned on
0003             86   alarm_morning_flag: dbit 1 ;Set to one if the alarm is set to a time in the morning
0004             87   
                 89   $LIST
00DA             91   
00DA             92   ;                         1234567890123456    <- This helps determine the location of the counter
00DA 54696D65    93   Initial_Message_Row1: db 'Time  xx:xx:xxX ', 0
     20207878
     3A78783A
     78785820
     00
00EB 416C6172    94   Initial_Message_Row2: db 'Alarm xx:xxX xxx', 0
     6D207878
     3A787858
     20787878
     00
00FC             95   
00FC             96   ;---------------------------------;
00FC             97   ; Routine to initialize the ISR   ;
00FC             98   ; for timer 0                     ;
00FC             99   ;---------------------------------;
00FC            100   Timer0_Init:
00FC E589       101            mov a, TMOD
00FE 54F0       102            anl a, #0xf0 ; Clear the bits for timer 0
0100 4401       103            orl a, #0x01 ; Configure timer 0 as 16-bit timer
0102 F589       104            mov TMOD, a
0104 758CEA     105            mov TH0, #high(TIMER0_RELOAD)
0107 758AE8     106            mov TL0, #low(TIMER0_RELOAD)
010A            107            ; Set autoreload value
010A 75F4EA     108            mov RH0, #high(TIMER0_RELOAD)
010D 75F2E8     109            mov RL0, #low(TIMER0_RELOAD)
0110            110            ; Enable the timer and interrupts
0110 D2A9       111       setb ET0  ; Enable timer 0 interrupt
0112 C28C       112       clr TR0  ;Don't want timer to start right away
0114 22         113            ret
0115            114            
0115            115   ;---------------------------------;
0115            116   ; ISR for timer 0.  Set to execute;
0115            117   ; every 1/4096Hz to generate a    ;
0115            118   ; 2048 Hz square wave at pin P1.1 ;
0115            119   ;---------------------------------;
0115            120   Timer0_ISR:
0115            121            ;clr TF0  ; According to the data sheet this is done for us already.
0115            122            
0115 B282       123            cpl SOUND_OUT ; Connect speaker to P0.2
0117 32         124            reti
0118            125            
0118            126   ;---------------------------------;
0118            127   ; Routine to initialize the ISR   ;
0118            128   ; for timer 2                     ;
0118            129   ;---------------------------------;
0118            130   Timer2_Init:
0118 75C800     131            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
011B 75CDA9     132            mov TH2, #high(TIMER2_RELOAD)
011E 75CC9A     133            mov TL2, #low(TIMER2_RELOAD)
0121            134            ; Set the reload value
0121 75CBA9     135            mov RCAP2H, #high(TIMER2_RELOAD)
0124 75CA9A     136            mov RCAP2L, #low(TIMER2_RELOAD)
0127            137            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0127 E4         138            clr a
0128 F530       139            mov Count1ms+0, a
012A F531       140            mov Count1ms+1, a
012C            141            ; Enable the timer and interrupts
012C D2AD       142       setb ET2  ; Enable timer 2 interrupt
012E D2CA       143       setb TR2  ; Enable timer 2
0130 22         144            ret
0131            145            
0131            146   ;---------------------------------;
0131            147   ; ISR for timer 2                 ;
0131            148   ;---------------------------------;
0131            149   Timer2_ISR:
0131 C2CF       150            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0133 B290       151            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0135            152            
0135            153            ; The two registers used in the ISR must be saved in the stack
0135 C0E0       154            push acc
0137 C0D0       155            push psw
0139            156            
0139            157            ; Increment the 16-bit one mili second counter
0139 0530       158            inc Count1ms+0    ; Increment the low 8-bits first
013B E530       159            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013D 7002       160            jnz Inc_Done
013F 0531       161            inc Count1ms+1
0141            162            
0141            163   Inc_Done:
0141            164            ; Check if half second has passed
0141 E530       165            mov a, Count1ms+0
0143 B4E83C     166            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0146 E531       167            mov a, Count1ms+1
0148 B40337     168            cjne a, #high(1000), Timer2_ISR_done
014B            169            
014B            170            ; 1 second has passed.  Set a flag so the main program knows
014B D200       171            setb one_second_flag ; Let the main program know one second has passed
014D            172            
014D            173            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
014D E4         174            clr a
014E F530       175            mov Count1ms+0, a
0150 F531       176            mov Count1ms+1, a
0152            177            
0152            178            ; Increment the seconds counter
0152 E533       179            mov a, BCD_secs
0154 B45913     180            cjne a, #59H, inc_secs ;Check if seconds have "overflowed"
0157            181            ;Reset seconds counter
0157 E4         182            clr a
0158 F533       183            mov BCD_secs, a
015A            184            
015A            185            ;Increment minutes counter
015A E534       186            mov a, BCD_mins
015C B45912     187            cjne a, #59H, inc_mins ;Check if minutes have "overflowed"
015F            188            ;Reset minutes counter
015F E4         189            clr a
0160 F534       190            mov BCD_mins, a
0162            191            
0162            192            ;Increment hours counter
0162 E532       193            mov a, BCD_hrs
0164 B41211     194            cjne a, #12H, inc_hrs ;Check if hours have "overflowed"
0167            195            ;Reset hours counter
0167 E4         196            clr a
0168 800E       197            sjmp inc_hrs ;When hours overflow, BCD_hrs should be reset to 01 and not 00
016A            198            
016A            199   inc_secs:
016A 2401       200            add a, #0x01
016C D4         201            da a
016D F533       202            mov BCD_secs, a
016F 8011       203            sjmp Timer2_ISR_done
0171            204            
0171            205   inc_mins:
0171 2401       206            add a, #0x01
0173 D4         207            da a
0174 F534       208            mov BCD_mins, a
0176 800A       209            sjmp Timer2_ISR_done
0178            210            
0178            211   inc_hrs:
0178 2401       212            add a, #0x01
017A D4         213            da a
017B F532       214            mov BCD_hrs, a
017D            215            ;Morning flag should be changed whenver the hour hits 12
017D B41202     216            cjne a, #12H, Timer2_ISR_done
0180 B201       217            cpl morning_flag
0182            218            
0182            219   Timer2_ISR_done:
0182 D0D0       220            pop psw
0184 D0E0       221            pop acc
0186 32         222            reti
0187            223            
0187            224   ;---------------------------------;
0187            225   ; Main program. Includes hardware ;
0187            226   ; initialization and 'forever'    ;
0187            227   ; loop.                           ;
0187            228   ;---------------------------------;
0187            229   main:
0187            230            ; Initialization
0187 75817F     231       mov SP, #0x7F
018A 1200FC     232       lcall Timer0_Init
018D 120118     233       lcall Timer2_Init
0190            234       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
0190 75E600     235       mov P0M0, #0
0193 75E700     236       mov P0M1, #0
0196 D2AF       237       setb EA   ; Enable Global interrupts
0198 120088     238       lcall LCD_4BIT
019B            239       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
019B            240       
019B            241       ;Initialize LCD screen
019B C0E0       242            push acc
019D 7401       242            mov a, #1
019F 14         242            dec a
01A0 1200BF     242            lcall ?Set_Cursor_1 ; Select column and row
01A3 D0E0       242            pop acc
01A5 C083       243            push dph
01A7 C082       243            push dpl
01A9 C0E0       243            push acc
01AB 9000DA     243            mov dptr, #Initial_Message_Row1
01AE 1200B2     243            lcall ?Send_Constant_String
01B1 D0E0       243            pop acc
01B3 D082       243            pop dpl
01B5 D083       243            pop dph
01B7 C0E0       244            push acc
01B9 7401       244            mov a, #1
01BB 14         244            dec a
01BC 1200BD     244            lcall ?Set_Cursor_2 ; Select column and row
01BF D0E0       244            pop acc
01C1 C083       245            push dph
01C3 C082       245            push dpl
01C5 C0E0       245            push acc
01C7 9000EB     245            mov dptr, #Initial_Message_Row2
01CA 1200B2     245            lcall ?Send_Constant_String
01CD D0E0       245            pop acc
01CF D082       245            pop dpl
01D1 D083       245            pop dph
01D3            246       
01D3            247       ;Initialize current time. Default is 12:00:00
01D3 740C       248            mov a, #0x0C
01D5 D4         249            da a
01D6 F532       250            mov BCD_hrs, a
01D8 753400     251            mov BCD_mins, #0x00
01DB 753300     252            mov BCD_secs, #0x00
01DE            253            
01DE            254            ;Initialize alarm time. Default is 12:00
01DE 740C       255            mov a, #0x0C
01E0 D4         256            da a
01E1 F535       257            mov alarm_hrs, a
01E3 753600     258            mov alarm_mins, #0x00
01E6            259            
01E6            260            ;Initialize flags. Default is morning, alarm off
01E6 D200       261            setb one_second_flag
01E8 D201       262            setb morning_flag
01EA D203       263            setb alarm_morning_flag
01EC C202       264            clr alarm_flag
01EE            265   
01EE            266            ; After initialization the program stays in this 'forever' loop
01EE            267   loop:
01EE            268            ;Check if hours are being incremented through buttons
01EE 20A01F     269            jb HRS_UP, check_mins
01F1 C002       270            push AR2
01F3 7A50       270            mov R2, #80
01F5 120039     270            lcall ?Wait_Milli_Seconds
01F8 D002       270            pop AR2
01FA 20A013     271            jb HRS_UP, check_mins
01FD            272            ;Check if hours have overflowed
01FD            273   check_hr:
01FD E532       274            mov a, BCD_hrs
01FF B41201     275            cjne a, #12H, add_hr
0202 E4         276            clr a
0203            277   add_hr:
0203 2401       278            add a, #0x01
0205 D4         279            da a
0206 F532       280            mov BCD_hrs, a
0208            281            ;Morning flag should be changed whenver the hour hits 12
0208 B41202     282            cjne a, #12H, jump
020B B201       283            cpl morning_flag
020D            284   jump:
020D 0202DC     285            ljmp display
0210            286            
0210            287            ;Check if minutes are being incremented through pushbutton
0210            288   check_mins:
0210 20A31E     289            jb MINS_UP, check_secs
0213 C002       290            push AR2
0215 7A50       290            mov R2, #80
0217 120039     290            lcall ?Wait_Milli_Seconds
021A D002       290            pop AR2
021C 20A312     291            jb MINS_UP, check_secs
021F            292   mins_ovf:        
021F E534       293            mov a, BCD_mins
0221 B45905     294            cjne a, #59H, add_min
0224 E4         295            clr a
0225 F534       296            mov BCD_mins, a
0227 80D4       297            sjmp check_hr
0229            298   add_min:
0229 2401       299            add a, #0x01
022B D4         300            da a
022C F534       301            mov BCD_mins, a
022E 0202DC     302            ljmp display
0231            303            
0231            304   check_secs:
0231 20A51E     305            jb SECS_UP, check_alarm_hrs
0234 C002       306            push AR2
0236 7A50       306            mov R2, #80
0238 120039     306            lcall ?Wait_Milli_Seconds
023B D002       306            pop AR2
023D 20A512     307            jb SECS_UP, check_alarm_hrs
0240 E533       308            mov a, BCD_secs
0242 B45905     309            cjne a, #59H, add_sec
0245 E4         310            clr a
0246 F533       311            mov BCD_secs, a
0248 80D5       312            sjmp mins_ovf
024A            313   add_sec:
024A 2401       314            add a, #0x01
024C D4         315            da a
024D F533       316            mov BCD_secs, a
024F 0202DC     317            ljmp display
0252            318                    
0252            319   check_alarm_hrs:
0252 20861E     320            jb ALRM_HRS_UP, check_alarm_mins
0255 C002       321            push AR2
0257 7A50       321            mov R2, #80
0259 120039     321            lcall ?Wait_Milli_Seconds
025C D002       321            pop AR2
025E 208612     322            jb ALRM_HRS_UP, check_alarm_mins
0261            323   check_alarm_hr:
0261 E535       324            mov a, alarm_hrs
0263 B41201     325            cjne a, #12H, add_alarm_hr
0266 E4         326            clr a
0267            327   add_alarm_hr:
0267 2401       328            add a, #0x01
0269 D4         329            da a
026A F535       330            mov alarm_hrs, a
026C            331            ;Morning flag should be changed whenver the hour hits 12
026C B4126D     332            cjne a, #12H, display
026F B203       333            cpl alarm_morning_flag
0271 8069       334            sjmp display
0273            335            
0273            336   check_alarm_mins:
0273 20831D     337            jb ALRM_MINS_UP, check_alarm_set
0276 C002       338            push AR2
0278 7A50       338            mov R2, #80
027A 120039     338            lcall ?Wait_Milli_Seconds
027D D002       338            pop AR2
027F 208311     339            jb ALRM_MINS_UP, check_alarm_set
0282 E536       340            mov a, alarm_mins
0284 B45905     341            cjne a, #59H, add_alarm_min
0287 E4         342            clr a
0288 F536       343            mov alarm_mins, a
028A 80D5       344            sjmp check_alarm_hr
028C            345   add_alarm_min:
028C 2401       346            add a, #0x01
028E D4         347            da a
028F F536       348            mov alarm_mins, a
0291 8049       349            sjmp display
0293            350            
0293            351   check_alarm_set:
0293 209313     352            jb ALRM_SET, check_boot
0296 C002       353            push AR2
0298 7A50       353            mov R2, #80
029A 120039     353            lcall ?Wait_Milli_Seconds
029D D002       353            pop AR2
029F 209307     354            jb ALRM_SET, check_boot
02A2 3093FD     355            jnb ALRM_SET, $ ;Wait until button is released
02A5 B202       356            cpl alarm_flag
02A7 8033       357            sjmp display
02A9            358            
02A9            359   check_boot:
02A9 20C528     360            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
02AC C002       361            push AR2
02AE 7A32       361            mov R2, #50
02B0 120039     361            lcall ?Wait_Milli_Seconds
02B3 D002       361            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
02B5 20C51C     362            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
02B8 30C5FD     363            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
02BB            364            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
02BB            365            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
02BB C2CA       366            clr TR2                 ; Stop timer 2
02BD E4         367            clr a
02BE            368            
02BE            369            ;Reset milliseconds counter
02BE F530       370            mov Count1ms+0, a
02C0 F531       371            mov Count1ms+1, a
02C2            372            
02C2            373            ;Reset current time
02C2 F533       374            mov BCD_secs, a
02C4 F534       375            mov BCD_mins, a
02C6 F532       376            mov BCD_hrs, a
02C8            377            
02C8            378            ;Reset alarm time
02C8 F535       379            mov alarm_hrs, a
02CA F536       380            mov alarm_mins, a
02CC            381            
02CC            382            ;Reset flags
02CC D201       383            setb morning_flag
02CE C202       384            clr alarm_flag
02D0            385            
02D0 D2CA       386            setb TR2                ; Start timer 2
02D2 8006       387            sjmp loop_b             ; Display the new value
02D4            388   loop_a:
02D4 200003     389            jb one_second_flag, loop_b
02D7 0201EE     390            ljmp loop
02DA            391   loop_b:
02DA C200       392       clr one_second_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
02DC            393   display:    
02DC            394       ;Display current time
02DC C0E0       395            push acc
02DE 7407       395            mov a, #7
02E0 14         395            dec a
02E1 1200BF     395            lcall ?Set_Cursor_1 ; Select column and row
02E4 D0E0       395            pop acc
02E6 C000       396            push ar0
02E8 A832       396            mov r0, BCD_hrs
02EA 1200C4     396            lcall ?Display_BCD
02ED D000       396            pop ar0
02EF C0E0       397            push acc
02F1 740A       397            mov a, #10
02F3 14         397            dec a
02F4 1200BF     397            lcall ?Set_Cursor_1 ; Select column and row
02F7 D0E0       397            pop acc
02F9 C000       398            push ar0
02FB A834       398            mov r0, BCD_mins
02FD 1200C4     398            lcall ?Display_BCD
0300 D000       398            pop ar0
0302 C0E0       399            push acc
0304 740D       399            mov a, #13
0306 14         399            dec a
0307 1200BF     399            lcall ?Set_Cursor_1 ; Select column and row
030A D0E0       399            pop acc     
030C C000       400            push ar0
030E A833       400            mov r0, BCD_secs
0310 1200C4     400            lcall ?Display_BCD
0313 D000       400            pop ar0 
0315            401   
0315            402            ;Display alarm time
0315 C0E0       403            push acc
0317 7407       403            mov a, #7
0319 14         403            dec a
031A 1200BD     403            lcall ?Set_Cursor_2 ; Select column and row
031D D0E0       403            pop acc
031F C000       404            push ar0
0321 A835       404            mov r0, alarm_hrs
0323 1200C4     404            lcall ?Display_BCD
0326 D000       404            pop ar0
0328 C0E0       405            push acc
032A 740A       405            mov a, #10
032C 14         405            dec a
032D 1200BD     405            lcall ?Set_Cursor_2 ; Select column and row
0330 D0E0       405            pop acc
0332 C000       406            push ar0
0334 A836       406            mov r0, alarm_mins
0336 1200C4     406            lcall ?Display_BCD
0339 D000       406            pop ar0
033B            407            
033B            408            ;Display alarm on/off
033B C0E0       409            push acc
033D 740E       409            mov a, #14
033F 14         409            dec a
0340 1200BD     409            lcall ?Set_Cursor_2 ; Select column and row
0343 D0E0       409            pop acc
0345 C0E0       410            push acc
0347 746F       410            mov a, #'o'
0349 12007E     410            lcall ?WriteData
034C D0E0       410            pop acc
034E C0E0       411            push acc
0350 740F       411            mov a, #15
0352 14         411            dec a
0353 1200BD     411            lcall ?Set_Cursor_2 ; Select column and row
0356 D0E0       411            pop acc
0358 30021E     412            jnb alarm_flag, alarm_off
035B C0E0       413            push acc
035D 746E       413            mov a, #'n'
035F 12007E     413            lcall ?WriteData
0362 D0E0       413            pop acc
0364 C0E0       414            push acc
0366 7410       414            mov a, #16
0368 14         414            dec a
0369 1200BD     414            lcall ?Set_Cursor_2 ; Select column and row
036C D0E0       414            pop acc
036E C0E0       415            push acc
0370 7420       415            mov a, #' '
0372 12007E     415            lcall ?WriteData
0375 D0E0       415            pop acc
0377 801C       416            sjmp display_AP_alarm
0379            417   alarm_off:
0379 C0E0       418            push acc
037B 7466       418            mov a, #'f'
037D 12007E     418            lcall ?WriteData
0380 D0E0       418            pop acc
0382 C0E0       419            push acc
0384 7410       419            mov a, #16
0386 14         419            dec a
0387 1200BD     419            lcall ?Set_Cursor_2 ; Select column and row
038A D0E0       419            pop acc
038C C0E0       420            push acc
038E 7466       420            mov a, #'f'
0390 12007E     420            lcall ?WriteData
0393 D0E0       420            pop acc
0395            421            
0395            422   display_AP_alarm:
0395 C0E0       423            push acc
0397 740C       423            mov a, #12
0399 14         423            dec a
039A 1200BD     423            lcall ?Set_Cursor_2 ; Select column and row
039D D0E0       423            pop acc
039F 30030B     424            jnb alarm_morning_flag, set_alarm_pm
03A2 C0E0       425            push acc
03A4 7441       425            mov a, #'A'
03A6 12007E     425            lcall ?WriteData
03A9 D0E0       425            pop acc
03AB 8009       426            sjmp display_AP
03AD            427   set_alarm_pm:
03AD C0E0       428            push acc
03AF 7450       428            mov a, #'P'
03B1 12007E     428            lcall ?WriteData
03B4 D0E0       428            pop acc
03B6            429            
03B6            430   display_AP:      
03B6 C0E0       431            push acc
03B8 740F       431            mov a, #15
03BA 14         431            dec a
03BB 1200BF     431            lcall ?Set_Cursor_1 ; Select column and row
03BE D0E0       431            pop acc
03C0 30010B     432            jnb morning_flag, set_pm
03C3 C0E0       433            push acc
03C5 7441       433            mov a, #'A'
03C7 12007E     433            lcall ?WriteData
03CA D0E0       433            pop acc
03CC 8009       434            sjmp check_alarm_sound
03CE            435   set_pm:
03CE C0E0       436            push acc
03D0 7450       436            mov a, #'P'
03D2 12007E     436            lcall ?WriteData
03D5 D0E0       436            pop acc
03D7            437            
03D7            438            ;Check to see if the alarm should be turned on. Conditions to be met:
03D7            439            ;1. Alarm and actual time are both AM or both PM
03D7            440            ;2. Alarm and actual mins are the same
03D7            441            ;3. Alarm and actual hours are the same
03D7            442            ;4. Alarm is activated
03D7            443   check_alarm_sound:
03D7 E4         444            clr a
03D8 F5F0       445            mov b, a
03DA A201       446            mov c, morning_flag
03DC 92F0       447            mov b.0, c
03DE A203       448            mov c, alarm_morning_flag
03E0 92E0       449            mov acc.0, c
03E2 B5F011     450            cjne a, b, alarm_sound_off
03E5            451            
03E5 E534       452            mov a, BCD_mins
03E7 B5360C     453            cjne a, alarm_mins, alarm_sound_off
03EA            454            
03EA E532       455            mov a, BCD_hrs
03EC B53507     456            cjne a, alarm_hrs, alarm_sound_off
03EF 300204     457            jnb alarm_flag, alarm_sound_off
03F2 D28C       458            setb TR0  ; Start timer 0
03F4 8002       459            sjmp continue
03F6            460   alarm_sound_off:
03F6 C28C       461            clr TR0
03F8            462   continue:
03F8 0201EE     463       ljmp loop
03FB            464   EN
