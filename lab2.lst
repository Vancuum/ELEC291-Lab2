0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P1.1 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             14   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             15   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             16   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             17   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             18   
0000             19   BOOT_BUTTON   equ P4.5
0000             20   SOUND_OUT     equ P0.2
0000             21   HRS_UP        equ P2.0
0000             22   MINS_UP            equ P2.3
0000             23   ALRM_MINS_UP  equ P0.3
0000             24   ALRM_HRS_UP   equ P0.6
0000             25   ALRM_SET      equ P1.3
0000             26   
0000             27   ; Reset vector
0000             28   org 0x0000
0000 020187      29       ljmp main
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0x0003
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 0x000B
000B 020115      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0x0013
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 0x001B
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0x0023 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 0x002B
002B 02012F      53            ljmp Timer2_ISR
002E             54            
002E             55   
002E             56   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             57   dseg at 0x30
0030             58   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             59   ;BCD counters to store the current time
0032             60   BCD_hrs: ds 1
0033             61   BCD_secs:  ds 1
0034             62   BCD_mins: ds 1 
0035             63   ;BCD counters to store the time the alarm is set to
0035             64   alarm_hrs: ds 1
0036             65   alarm_mins: ds 1
0037             66   
0037             67   
002E             68   cseg
002E             69   ; These 'equ' must match the hardware wiring
002E             70   LCD_RS equ P3.2
002E             71   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             72   LCD_E  equ P3.3
002E             73   LCD_D4 equ P3.4
002E             74   LCD_D5 equ P3.5
002E             75   LCD_D6 equ P3.6
002E             76   LCD_D7 equ P3.7
002E             77   
002E             78   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
002E             79   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             80   bseg
0000             81   one_second_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             82   morning_flag: dbit 1 ;Set to one if it is the morning
0002             83   alarm_flag: dbit 1 ;Set to one if the alarm functionality is turned on
0003             84   alarm_morning_flag: dbit 1 ;Set to one if the alarm is set to a time in the morning
0004             85   
                 87   $LIST
00DA             89   
00DA             90   ;                         1234567890123456    <- This helps determine the location of the counter
00DA 54696D65    91   Initial_Message_Row1: db 'Time  xx:xx:xxX ', 0
     20207878
     3A78783A
     78785820
     00
00EB 416C6172    92   Initial_Message_Row2: db 'Alarm xx:xxX xxx', 0
     6D207878
     3A787858
     20787878
     00
00FC             93   
00FC             94   ;---------------------------------;
00FC             95   ; Routine to initialize the ISR   ;
00FC             96   ; for timer 0                     ;
00FC             97   ;---------------------------------;
00FC             98   Timer0_Init:
00FC E589        99            mov a, TMOD
00FE 54F0       100            anl a, #0xf0 ; Clear the bits for timer 0
0100 4401       101            orl a, #0x01 ; Configure timer 0 as 16-bit timer
0102 F589       102            mov TMOD, a
0104 758CEA     103            mov TH0, #high(TIMER0_RELOAD)
0107 758AE8     104            mov TL0, #low(TIMER0_RELOAD)
010A            105            ; Set autoreload value
010A 75F4EA     106            mov RH0, #high(TIMER0_RELOAD)
010D 75F2E8     107            mov RL0, #low(TIMER0_RELOAD)
0110            108            ; Enable the timer and interrupts
0110 D2A9       109       setb ET0  ; Enable timer 0 interrupt
0112 D28C       110       setb TR0  ; Start timer 0
0114 22         111            ret
0115            112            
0115            113   ;---------------------------------;
0115            114   ; ISR for timer 0.  Set to execute;
0115            115   ; every 1/4096Hz to generate a    ;
0115            116   ; 2048 Hz square wave at pin P1.1 ;
0115            117   ;---------------------------------;
0115            118   Timer0_ISR:
0115            119            ;clr TF0  ; According to the data sheet this is done for us already.
0115            120            
0115            121            ;Take this line out so I don't get a headache while debugging
0115            122            ;cpl SOUND_OUT ; Connect speaker to P0.2
0115 32         123            reti
0116            124            
0116            125   ;---------------------------------;
0116            126   ; Routine to initialize the ISR   ;
0116            127   ; for timer 2                     ;
0116            128   ;---------------------------------;
0116            129   Timer2_Init:
0116 75C800     130            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0119 75CDA9     131            mov TH2, #high(TIMER2_RELOAD)
011C 75CC9A     132            mov TL2, #low(TIMER2_RELOAD)
011F            133            ; Set the reload value
011F 75CBA9     134            mov RCAP2H, #high(TIMER2_RELOAD)
0122 75CA9A     135            mov RCAP2L, #low(TIMER2_RELOAD)
0125            136            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0125 E4         137            clr a
0126 F530       138            mov Count1ms+0, a
0128 F531       139            mov Count1ms+1, a
012A            140            ; Enable the timer and interrupts
012A D2AD       141       setb ET2  ; Enable timer 2 interrupt
012C D2CA       142       setb TR2  ; Enable timer 2
012E 22         143            ret
012F            144            
012F            145   ;---------------------------------;
012F            146   ; ISR for timer 2                 ;
012F            147   ;---------------------------------;
012F            148   Timer2_ISR:
012F C2CF       149            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0131 B290       150            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0133            151            
0133            152            ; The two registers used in the ISR must be saved in the stack
0133 C0E0       153            push acc
0135 C0D0       154            push psw
0137            155            
0137            156            ; Increment the 16-bit one mili second counter
0137 0530       157            inc Count1ms+0    ; Increment the low 8-bits first
0139 E530       158            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013B 7002       159            jnz Inc_Done
013D 0531       160            inc Count1ms+1
013F            161            
013F            162   Inc_Done:
013F            163            ; Check if half second has passed
013F E530       164            mov a, Count1ms+0
0141 B4E83E     165            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0144 E531       166            mov a, Count1ms+1
0146 B40339     167            cjne a, #high(1000), Timer2_ISR_done
0149            168            
0149            169            ; 1 second has passed.  Set a flag so the main program knows
0149 D200       170            setb one_second_flag ; Let the main program know one second has passed
014B B28C       171            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
014D            172            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
014D E4         173            clr a
014E F530       174            mov Count1ms+0, a
0150 F531       175            mov Count1ms+1, a
0152            176            
0152            177            ; Increment the seconds counter
0152 E533       178            mov a, BCD_secs
0154 B45913     179            cjne a, #59H, inc_secs ;Check if seconds have "overflowed"
0157            180            ;Reset seconds counter
0157 E4         181            clr a
0158 F533       182            mov BCD_secs, a
015A            183            
015A            184            ;Increment minutes counter
015A E534       185            mov a, BCD_mins
015C B45912     186            cjne a, #59H, inc_mins ;Check if minutes have "overflowed"
015F            187            ;Reset minutes counter
015F E4         188            clr a
0160 F534       189            mov BCD_mins, a
0162            190            
0162            191            ;Increment hours counter
0162 E532       192            mov a, BCD_hrs
0164 B41211     193            cjne a, #12H, inc_hrs ;Check if hours have "overflowed"
0167            194            ;Reset hours counter
0167 E4         195            clr a
0168 800E       196            sjmp inc_hrs ;When hours overflow, BCD_hrs should be reset to 01 and not 00
016A            197            
016A            198   inc_secs:
016A 2401       199            add a, #0x01
016C D4         200            da a
016D F533       201            mov BCD_secs, a
016F 8011       202            sjmp Timer2_ISR_done
0171            203            
0171            204   inc_mins:
0171 2401       205            add a, #0x01
0173 D4         206            da a
0174 F534       207            mov BCD_mins, a
0176 800A       208            sjmp Timer2_ISR_done
0178            209            
0178            210   inc_hrs:
0178 2401       211            add a, #0x01
017A D4         212            da a
017B F532       213            mov BCD_hrs, a
017D            214            ;Morning flag should be changed whenver the hour hits 12
017D B41202     215            cjne a, #12H, Timer2_ISR_done
0180 B201       216            cpl morning_flag
0182            217   Timer2_ISR_done:
0182 D0D0       218            pop psw
0184 D0E0       219            pop acc
0186 32         220            reti
0187            221            
0187            222   ;---------------------------------;
0187            223   ; Main program. Includes hardware ;
0187            224   ; initialization and 'forever'    ;
0187            225   ; loop.                           ;
0187            226   ;---------------------------------;
0187            227   main:
0187            228            ; Initialization
0187 75817F     229       mov SP, #0x7F
018A 1200FC     230       lcall Timer0_Init
018D 120116     231       lcall Timer2_Init
0190            232       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
0190 75E600     233       mov P0M0, #0
0193 75E700     234       mov P0M1, #0
0196 D2AF       235       setb EA   ; Enable Global interrupts
0198 120088     236       lcall LCD_4BIT
019B            237       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
019B            238       
019B            239       ;Initialize LCD screen
019B C0E0       240            push acc
019D 7401       240            mov a, #1
019F 14         240            dec a
01A0 1200BF     240            lcall ?Set_Cursor_1 ; Select column and row
01A3 D0E0       240            pop acc
01A5 C083       241            push dph
01A7 C082       241            push dpl
01A9 C0E0       241            push acc
01AB 9000DA     241            mov dptr, #Initial_Message_Row1
01AE 1200B2     241            lcall ?Send_Constant_String
01B1 D0E0       241            pop acc
01B3 D082       241            pop dpl
01B5 D083       241            pop dph
01B7 C0E0       242            push acc
01B9 7401       242            mov a, #1
01BB 14         242            dec a
01BC 1200BD     242            lcall ?Set_Cursor_2 ; Select column and row
01BF D0E0       242            pop acc
01C1 C083       243            push dph
01C3 C082       243            push dpl
01C5 C0E0       243            push acc
01C7 9000EB     243            mov dptr, #Initial_Message_Row2
01CA 1200B2     243            lcall ?Send_Constant_String
01CD D0E0       243            pop acc
01CF D082       243            pop dpl
01D1 D083       243            pop dph
01D3            244       
01D3            245       ;Initialize current time. Default is 12:00:00
01D3 740C       246            mov a, #0x0C
01D5 D4         247            da a
01D6 F532       248            mov BCD_hrs, a
01D8 753400     249            mov BCD_mins, #0x00
01DB 753300     250            mov BCD_secs, #0x00
01DE            251            
01DE            252            ;Initialize alarm time. Default is 12:00
01DE 740C       253            mov a, #0x0C
01E0 D4         254            da a
01E1 F535       255            mov alarm_hrs, a
01E3 753600     256            mov alarm_mins, #0x00
01E6            257            
01E6            258            ;Initialize flags. Default is morning, alarm off
01E6 D200       259            setb one_second_flag
01E8 D201       260            setb morning_flag
01EA C202       261            clr alarm_flag
01EC D203       262            setb alarm_morning_flag
01EE            263   
01EE            264            ; After initialization the program stays in this 'forever' loop
01EE            265   loop:
01EE            266            ;Check if LCD screen is being configured
01EE 20A01C     267            jb HRS_UP, check_mins
01F1 C002       268            push AR2
01F3 7A50       268            mov R2, #80
01F5 120039     268            lcall ?Wait_Milli_Seconds
01F8 D002       268            pop AR2
01FA 20A010     269            jb HRS_UP, check_mins
01FD            270   check_hr:
01FD E532       271            mov a, BCD_hrs
01FF B41201     272            cjne a, #12H, add_hr
0202 E4         273            clr a
0203            274   add_hr:
0203 2401       275            add a, #0x01
0205 D4         276            da a
0206 F532       277            mov BCD_hrs, a
0208            278            ;Morning flag should be changed whenver the hour hits 12
0208 B41202     279            cjne a, #12H, check_mins
020B B201       280            cpl morning_flag
020D            281            
020D            282   check_mins:
020D 20A31B     283            jb MINS_UP, check_alarm_hrs
0210 C002       284            push AR2
0212 7A50       284            mov R2, #80
0214 120039     284            lcall ?Wait_Milli_Seconds
0217 D002       284            pop AR2
0219 20A30F     285            jb MINS_UP, check_alarm_hrs
021C E534       286            mov a, BCD_mins
021E B45905     287            cjne a, #59H, add_min
0221 E4         288            clr a
0222 F534       289            mov BCD_mins, a
0224 80DD       290            sjmp add_hr
0226            291   add_min:
0226 2401       292            add a, #0x01
0228 D4         293            da a
0229 F534       294            mov BCD_mins, a
022B            295                    
022B            296   check_alarm_hrs:
022B 20861C     297            jb ALRM_HRS_UP, check_alarm_mins
022E C002       298            push AR2
0230 7A50       298            mov R2, #80
0232 120039     298            lcall ?Wait_Milli_Seconds
0235 D002       298            pop AR2
0237 208610     299            jb ALRM_HRS_UP, check_alarm_mins
023A            300   check_alarm_hr:
023A E535       301            mov a, alarm_hrs
023C B41201     302            cjne a, #12H, add_alarm_hr
023F E4         303            clr a
0240            304   add_alarm_hr:
0240 2401       305            add a, #0x01
0242 D4         306            da a
0243 F535       307            mov alarm_hrs, a
0245            308            ;Morning flag should be changed whenver the hour hits 12
0245 B41202     309            cjne a, #12H, check_alarm_mins
0248 B203       310            cpl alarm_morning_flag
024A            311            
024A            312   check_alarm_mins:
024A 20831B     313            jb ALRM_MINS_UP, check_alarm_set
024D C002       314            push AR2
024F 7A50       314            mov R2, #80
0251 120039     314            lcall ?Wait_Milli_Seconds
0254 D002       314            pop AR2
0256 20830F     315            jb ALRM_MINS_UP, check_alarm_set
0259 E536       316            mov a, alarm_mins
025B B45905     317            cjne a, #59H, add_alarm_min
025E E4         318            clr a
025F F536       319            mov alarm_mins, a
0261 80D7       320            sjmp check_alarm_hr
0263            321   add_alarm_min:
0263 2401       322            add a, #0x01
0265 D4         323            da a
0266 F536       324            mov alarm_mins, a
0268            325            
0268            326   check_alarm_set:
0268 20930E     327            jb ALRM_SET, check_boot
026B C002       328            push AR2
026D 7A50       328            mov R2, #80
026F 120039     328            lcall ?Wait_Milli_Seconds
0272 D002       328            pop AR2
0274 209302     329            jb ALRM_SET, check_boot
0277 B202       330            cpl alarm_flag
0279            331            
0279            332   check_boot:
0279 20C528     333            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
027C C002       334            push AR2
027E 7A32       334            mov R2, #50
0280 120039     334            lcall ?Wait_Milli_Seconds
0283 D002       334            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0285 20C51C     335            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
0288 30C5FD     336            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
028B            337            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
028B            338            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
028B C2CA       339            clr TR2                 ; Stop timer 2
028D E4         340            clr a
028E            341            
028E            342            ;Reset milliseconds counter
028E F530       343            mov Count1ms+0, a
0290 F531       344            mov Count1ms+1, a
0292            345            
0292            346            ;Reset current time
0292 F533       347            mov BCD_secs, a
0294 F534       348            mov BCD_mins, a
0296 F532       349            mov BCD_hrs, a
0298            350            
0298            351            ;Reset alarm time
0298 F535       352            mov alarm_hrs, a
029A F536       353            mov alarm_mins, a
029C            354            
029C            355            ;Reset flags
029C D201       356            setb morning_flag
029E C202       357            clr alarm_flag
02A0            358            
02A0 D2CA       359            setb TR2                ; Start timer 2
02A2 8006       360            sjmp loop_b             ; Display the new value
02A4            361   loop_a:
02A4 200003     362            jb one_second_flag, loop_b
02A7 0201EE     363            ljmp loop
02AA            364   loop_b:
02AA C200       365       clr one_second_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
02AC            366       
02AC            367       ;Display current time
02AC C0E0       368            push acc
02AE 7407       368            mov a, #7
02B0 14         368            dec a
02B1 1200BF     368            lcall ?Set_Cursor_1 ; Select column and row
02B4 D0E0       368            pop acc
02B6 C000       369            push ar0
02B8 A832       369            mov r0, BCD_hrs
02BA 1200C4     369            lcall ?Display_BCD
02BD D000       369            pop ar0
02BF C0E0       370            push acc
02C1 740A       370            mov a, #10
02C3 14         370            dec a
02C4 1200BF     370            lcall ?Set_Cursor_1 ; Select column and row
02C7 D0E0       370            pop acc
02C9 C000       371            push ar0
02CB A834       371            mov r0, BCD_mins
02CD 1200C4     371            lcall ?Display_BCD
02D0 D000       371            pop ar0
02D2 C0E0       372            push acc
02D4 740D       372            mov a, #13
02D6 14         372            dec a
02D7 1200BF     372            lcall ?Set_Cursor_1 ; Select column and row
02DA D0E0       372            pop acc     
02DC C000       373            push ar0
02DE A833       373            mov r0, BCD_secs
02E0 1200C4     373            lcall ?Display_BCD
02E3 D000       373            pop ar0 
02E5            374   
02E5            375            ;Display alarm time
02E5 C0E0       376            push acc
02E7 7407       376            mov a, #7
02E9 14         376            dec a
02EA 1200BD     376            lcall ?Set_Cursor_2 ; Select column and row
02ED D0E0       376            pop acc
02EF C000       377            push ar0
02F1 A835       377            mov r0, alarm_hrs
02F3 1200C4     377            lcall ?Display_BCD
02F6 D000       377            pop ar0
02F8 C0E0       378            push acc
02FA 740A       378            mov a, #10
02FC 14         378            dec a
02FD 1200BD     378            lcall ?Set_Cursor_2 ; Select column and row
0300 D0E0       378            pop acc
0302 C000       379            push ar0
0304 A836       379            mov r0, alarm_mins
0306 1200C4     379            lcall ?Display_BCD
0309 D000       379            pop ar0
030B            380            
030B            381            ;Display alarm on/off
030B C0E0       382            push acc
030D 740E       382            mov a, #14
030F 14         382            dec a
0310 1200BD     382            lcall ?Set_Cursor_2 ; Select column and row
0313 D0E0       382            pop acc
0315 C0E0       383            push acc
0317 746F       383            mov a, #'o'
0319 12007E     383            lcall ?WriteData
031C D0E0       383            pop acc
031E C0E0       384            push acc
0320 740F       384            mov a, #15
0322 14         384            dec a
0323 1200BD     384            lcall ?Set_Cursor_2 ; Select column and row
0326 D0E0       384            pop acc
0328 30021E     385            jnb alarm_flag, alarm_off
032B C0E0       386            push acc
032D 746E       386            mov a, #'n'
032F 12007E     386            lcall ?WriteData
0332 D0E0       386            pop acc
0334 C0E0       387            push acc
0336 7410       387            mov a, #16
0338 14         387            dec a
0339 1200BD     387            lcall ?Set_Cursor_2 ; Select column and row
033C D0E0       387            pop acc
033E C0E0       388            push acc
0340 7420       388            mov a, #' '
0342 12007E     388            lcall ?WriteData
0345 D0E0       388            pop acc
0347 801C       389            sjmp display_AP_alarm
0349            390   alarm_off:
0349 C0E0       391            push acc
034B 7466       391            mov a, #'f'
034D 12007E     391            lcall ?WriteData
0350 D0E0       391            pop acc
0352 C0E0       392            push acc
0354 7410       392            mov a, #16
0356 14         392            dec a
0357 1200BD     392            lcall ?Set_Cursor_2 ; Select column and row
035A D0E0       392            pop acc
035C C0E0       393            push acc
035E 7466       393            mov a, #'f'
0360 12007E     393            lcall ?WriteData
0363 D0E0       393            pop acc
0365            394            
0365            395   display_AP_alarm:
0365 C0E0       396            push acc
0367 740C       396            mov a, #12
0369 14         396            dec a
036A 1200BD     396            lcall ?Set_Cursor_2 ; Select column and row
036D D0E0       396            pop acc
036F 30030B     397            jnb alarm_morning_flag, set_alarm_pm
0372 C0E0       398            push acc
0374 7441       398            mov a, #'A'
0376 12007E     398            lcall ?WriteData
0379 D0E0       398            pop acc
037B 8009       399            sjmp display_AP
037D            400   set_alarm_pm:
037D C0E0       401            push acc
037F 7450       401            mov a, #'P'
0381 12007E     401            lcall ?WriteData
0384 D0E0       401            pop acc
0386            402            
0386            403   display_AP:      
0386 C0E0       404            push acc
0388 740F       404            mov a, #15
038A 14         404            dec a
038B 1200BF     404            lcall ?Set_Cursor_1 ; Select column and row
038E D0E0       404            pop acc
0390 30010B     405            jnb morning_flag, set_pm
0393 C0E0       406            push acc
0395 7441       406            mov a, #'A'
0397 12007E     406            lcall ?WriteData
039A D0E0       406            pop acc
039C 8009       407            sjmp check_alarm_sound
039E            408   set_pm:
039E C0E0       409            push acc
03A0 7450       409            mov a, #'P'
03A2 12007E     409            lcall ?WriteData
03A5 D0E0       409            pop acc
03A7            410            
03A7            411   check_alarm_sound:
03A7 C3         412            clr c
03A8 E501       413            mov a, morning_flag
03AA B50313     414            cjne a, alarm_morning_flag, continue
03AD 7011       415            jnz continue
03AF C3         416            clr c
03B0 E534       417            mov a, BCD_mins
03B2 B5360B     418            cjne a, alarm_mins, continue
03B5 C3         419            clr c
03B6 E532       420            mov a, BCD_hrs
03B8 B53505     421            cjne a, alarm_hrs, continue
03BB 300202     422            jnb alarm_flag, continue
03BE D282       423            setb SOUND_OUT ;Connect speaker to P0.2 
03C0            424   continue:
03C0 0201EE     425       ljmp loop
03C3            426   EN
