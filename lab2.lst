0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P1.1 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             14   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             15   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             16   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             17   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             18   
0000             19   BOOT_BUTTON   equ P4.5
0000             20   SOUND_OUT     equ P0.2
0000             21   HRS_UP        equ P2.0
0000             22   MINS_UP            equ P2.3
0000             23   ALRM_MINS_UP  equ P0.3
0000             24   ALRM_HRS_UP   equ P0.6
0000             25   ALRM_SET      equ P1.3
0000             26   
0000             27   ; Reset vector
0000             28   org 0x0000
0000 020187      29       ljmp main
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0x0003
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 0x000B
000B 020115      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0x0013
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 0x001B
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0x0023 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 0x002B
002B 020131      53            ljmp Timer2_ISR
002E             54            
002E             55   
002E             56   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             57   dseg at 0x30
0030             58   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             59   ;BCD counters to store the current time
0032             60   BCD_hrs: ds 1
0033             61   BCD_secs:  ds 1
0034             62   BCD_mins: ds 1 
0035             63   ;BCD counters to store the time the alarm is set to
0035             64   alarm_hrs: ds 1
0036             65   alarm_mins: ds 1
0037             66   
0037             67   
002E             68   cseg
002E             69   ; These 'equ' must match the hardware wiring
002E             70   LCD_RS equ P3.2
002E             71   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E             72   LCD_E  equ P3.3
002E             73   LCD_D4 equ P3.4
002E             74   LCD_D5 equ P3.5
002E             75   LCD_D6 equ P3.6
002E             76   LCD_D7 equ P3.7
002E             77   
002E             78   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
002E             79   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             80   bseg
0000             81   one_second_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             82   morning_flag: dbit 1 ;Set to one if it is the morning
0002             83   alarm_flag: dbit 1 ;Set to one if the alarm functionality is turned on
0003             84   alarm_morning_flag: dbit 1 ;Set to one if the alarm is set to a time in the morning
0004             85   
                 87   $LIST
00DA             89   
00DA             90   ;                         1234567890123456    <- This helps determine the location of the counter
00DA 54696D65    91   Initial_Message_Row1: db 'Time  xx:xx:xxX ', 0
     20207878
     3A78783A
     78785820
     00
00EB 416C6172    92   Initial_Message_Row2: db 'Alarm xx:xxX xxx', 0
     6D207878
     3A787858
     20787878
     00
00FC             93   
00FC             94   ;---------------------------------;
00FC             95   ; Routine to initialize the ISR   ;
00FC             96   ; for timer 0                     ;
00FC             97   ;---------------------------------;
00FC             98   Timer0_Init:
00FC E589        99            mov a, TMOD
00FE 54F0       100            anl a, #0xf0 ; Clear the bits for timer 0
0100 4401       101            orl a, #0x01 ; Configure timer 0 as 16-bit timer
0102 F589       102            mov TMOD, a
0104 758CEA     103            mov TH0, #high(TIMER0_RELOAD)
0107 758AE8     104            mov TL0, #low(TIMER0_RELOAD)
010A            105            ; Set autoreload value
010A 75F4EA     106            mov RH0, #high(TIMER0_RELOAD)
010D 75F2E8     107            mov RL0, #low(TIMER0_RELOAD)
0110            108            ; Enable the timer and interrupts
0110 D2A9       109       setb ET0  ; Enable timer 0 interrupt
0112 C28C       110       clr TR0  ;Don't want timer to start right away
0114 22         111            ret
0115            112            
0115            113   ;---------------------------------;
0115            114   ; ISR for timer 0.  Set to execute;
0115            115   ; every 1/4096Hz to generate a    ;
0115            116   ; 2048 Hz square wave at pin P1.1 ;
0115            117   ;---------------------------------;
0115            118   Timer0_ISR:
0115            119            ;clr TF0  ; According to the data sheet this is done for us already.
0115            120            
0115            121            ;Take this line out so I don't get a headache while debugging
0115 B282       122            cpl SOUND_OUT ; Connect speaker to P0.2
0117 32         123            reti
0118            124            
0118            125   ;---------------------------------;
0118            126   ; Routine to initialize the ISR   ;
0118            127   ; for timer 2                     ;
0118            128   ;---------------------------------;
0118            129   Timer2_Init:
0118 75C800     130            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
011B 75CDA9     131            mov TH2, #high(TIMER2_RELOAD)
011E 75CC9A     132            mov TL2, #low(TIMER2_RELOAD)
0121            133            ; Set the reload value
0121 75CBA9     134            mov RCAP2H, #high(TIMER2_RELOAD)
0124 75CA9A     135            mov RCAP2L, #low(TIMER2_RELOAD)
0127            136            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0127 E4         137            clr a
0128 F530       138            mov Count1ms+0, a
012A F531       139            mov Count1ms+1, a
012C            140            ; Enable the timer and interrupts
012C D2AD       141       setb ET2  ; Enable timer 2 interrupt
012E D2CA       142       setb TR2  ; Enable timer 2
0130 22         143            ret
0131            144            
0131            145   ;---------------------------------;
0131            146   ; ISR for timer 2                 ;
0131            147   ;---------------------------------;
0131            148   Timer2_ISR:
0131 C2CF       149            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0133 B290       150            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0135            151            
0135            152            ; The two registers used in the ISR must be saved in the stack
0135 C0E0       153            push acc
0137 C0D0       154            push psw
0139            155            
0139            156            ; Increment the 16-bit one mili second counter
0139 0530       157            inc Count1ms+0    ; Increment the low 8-bits first
013B E530       158            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
013D 7002       159            jnz Inc_Done
013F 0531       160            inc Count1ms+1
0141            161            
0141            162   Inc_Done:
0141            163            ; Check if half second has passed
0141 E530       164            mov a, Count1ms+0
0143 B4E83C     165            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0146 E531       166            mov a, Count1ms+1
0148 B40337     167            cjne a, #high(1000), Timer2_ISR_done
014B            168            
014B            169            ; 1 second has passed.  Set a flag so the main program knows
014B D200       170            setb one_second_flag ; Let the main program know one second has passed
014D            171            
014D            172            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
014D E4         173            clr a
014E F530       174            mov Count1ms+0, a
0150 F531       175            mov Count1ms+1, a
0152            176            
0152            177            ; Increment the seconds counter
0152 E533       178            mov a, BCD_secs
0154 B45913     179            cjne a, #59H, inc_secs ;Check if seconds have "overflowed"
0157            180            ;Reset seconds counter
0157 E4         181            clr a
0158 F533       182            mov BCD_secs, a
015A            183            
015A            184            ;Increment minutes counter
015A E534       185            mov a, BCD_mins
015C B45912     186            cjne a, #59H, inc_mins ;Check if minutes have "overflowed"
015F            187            ;Reset minutes counter
015F E4         188            clr a
0160 F534       189            mov BCD_mins, a
0162            190            
0162            191            ;Increment hours counter
0162 E532       192            mov a, BCD_hrs
0164 B41211     193            cjne a, #12H, inc_hrs ;Check if hours have "overflowed"
0167            194            ;Reset hours counter
0167 E4         195            clr a
0168 800E       196            sjmp inc_hrs ;When hours overflow, BCD_hrs should be reset to 01 and not 00
016A            197            
016A            198   inc_secs:
016A 2401       199            add a, #0x01
016C D4         200            da a
016D F533       201            mov BCD_secs, a
016F 8011       202            sjmp Timer2_ISR_done
0171            203            
0171            204   inc_mins:
0171 2401       205            add a, #0x01
0173 D4         206            da a
0174 F534       207            mov BCD_mins, a
0176 800A       208            sjmp Timer2_ISR_done
0178            209            
0178            210   inc_hrs:
0178 2401       211            add a, #0x01
017A D4         212            da a
017B F532       213            mov BCD_hrs, a
017D            214            ;Morning flag should be changed whenver the hour hits 12
017D B41202     215            cjne a, #12H, Timer2_ISR_done
0180 B201       216            cpl morning_flag
0182            217   Timer2_ISR_done:
0182 D0D0       218            pop psw
0184 D0E0       219            pop acc
0186 32         220            reti
0187            221            
0187            222   ;---------------------------------;
0187            223   ; Main program. Includes hardware ;
0187            224   ; initialization and 'forever'    ;
0187            225   ; loop.                           ;
0187            226   ;---------------------------------;
0187            227   main:
0187            228            ; Initialization
0187 75817F     229       mov SP, #0x7F
018A 1200FC     230       lcall Timer0_Init
018D 120118     231       lcall Timer2_Init
0190            232       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
0190 75E600     233       mov P0M0, #0
0193 75E700     234       mov P0M1, #0
0196 D2AF       235       setb EA   ; Enable Global interrupts
0198 120088     236       lcall LCD_4BIT
019B            237       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
019B            238       
019B            239       ;Initialize LCD screen
019B C0E0       240            push acc
019D 7401       240            mov a, #1
019F 14         240            dec a
01A0 1200BF     240            lcall ?Set_Cursor_1 ; Select column and row
01A3 D0E0       240            pop acc
01A5 C083       241            push dph
01A7 C082       241            push dpl
01A9 C0E0       241            push acc
01AB 9000DA     241            mov dptr, #Initial_Message_Row1
01AE 1200B2     241            lcall ?Send_Constant_String
01B1 D0E0       241            pop acc
01B3 D082       241            pop dpl
01B5 D083       241            pop dph
01B7 C0E0       242            push acc
01B9 7401       242            mov a, #1
01BB 14         242            dec a
01BC 1200BD     242            lcall ?Set_Cursor_2 ; Select column and row
01BF D0E0       242            pop acc
01C1 C083       243            push dph
01C3 C082       243            push dpl
01C5 C0E0       243            push acc
01C7 9000EB     243            mov dptr, #Initial_Message_Row2
01CA 1200B2     243            lcall ?Send_Constant_String
01CD D0E0       243            pop acc
01CF D082       243            pop dpl
01D1 D083       243            pop dph
01D3            244       
01D3            245       ;Initialize current time. Default is 12:00:00
01D3 740C       246            mov a, #0x0C
01D5 D4         247            da a
01D6 F532       248            mov BCD_hrs, a
01D8 753400     249            mov BCD_mins, #0x00
01DB 753300     250            mov BCD_secs, #0x00
01DE            251            
01DE            252            ;Initialize alarm time. Default is 12:00
01DE 740C       253            mov a, #0x0C
01E0 D4         254            da a
01E1 F535       255            mov alarm_hrs, a
01E3 753600     256            mov alarm_mins, #0x00
01E6            257            
01E6            258            ;Initialize flags. Default is morning, alarm off
01E6 D200       259            setb one_second_flag
01E8 D201       260            setb morning_flag
01EA D203       261            setb alarm_morning_flag
01EC C202       262            clr alarm_flag
01EE            263   
01EE            264            ; After initialization the program stays in this 'forever' loop
01EE            265   loop:
01EE            266            ;Check if LCD screen is being configured
01EE 20A01F     267            jb HRS_UP, check_mins
01F1 C002       268            push AR2
01F3 7A50       268            mov R2, #80
01F5 120039     268            lcall ?Wait_Milli_Seconds
01F8 D002       268            pop AR2
01FA 20A013     269            jb HRS_UP, check_mins
01FD            270   check_hr:
01FD E532       271            mov a, BCD_hrs
01FF B41201     272            cjne a, #12H, add_hr
0202 E4         273            clr a
0203            274   add_hr:
0203 2401       275            add a, #0x01
0205 D4         276            da a
0206 F532       277            mov BCD_hrs, a
0208            278            ;Morning flag should be changed whenver the hour hits 12
0208 B41202     279            cjne a, #12H, jump
020B B201       280            cpl morning_flag
020D            281   jump:
020D 0202B8     282            ljmp display
0210            283            
0210            284   check_mins:
0210 20A31E     285            jb MINS_UP, check_alarm_hrs
0213 C002       286            push AR2
0215 7A50       286            mov R2, #80
0217 120039     286            lcall ?Wait_Milli_Seconds
021A D002       286            pop AR2
021C 20A312     287            jb MINS_UP, check_alarm_hrs
021F E534       288            mov a, BCD_mins
0221 B45905     289            cjne a, #59H, add_min
0224 E4         290            clr a
0225 F534       291            mov BCD_mins, a
0227 80DA       292            sjmp add_hr
0229            293   add_min:
0229 2401       294            add a, #0x01
022B D4         295            da a
022C F534       296            mov BCD_mins, a
022E 0202B8     297            ljmp display
0231            298                    
0231            299   check_alarm_hrs:
0231 20861E     300            jb ALRM_HRS_UP, check_alarm_mins
0234 C002       301            push AR2
0236 7A50       301            mov R2, #80
0238 120039     301            lcall ?Wait_Milli_Seconds
023B D002       301            pop AR2
023D 208612     302            jb ALRM_HRS_UP, check_alarm_mins
0240            303   check_alarm_hr:
0240 E535       304            mov a, alarm_hrs
0242 B41201     305            cjne a, #12H, add_alarm_hr
0245 E4         306            clr a
0246            307   add_alarm_hr:
0246 2401       308            add a, #0x01
0248 D4         309            da a
0249 F535       310            mov alarm_hrs, a
024B            311            ;Morning flag should be changed whenver the hour hits 12
024B B4126A     312            cjne a, #12H, display
024E B203       313            cpl alarm_morning_flag
0250 8066       314            sjmp display
0252            315            
0252            316   check_alarm_mins:
0252 20831D     317            jb ALRM_MINS_UP, check_alarm_set
0255 C002       318            push AR2
0257 7A50       318            mov R2, #80
0259 120039     318            lcall ?Wait_Milli_Seconds
025C D002       318            pop AR2
025E 208311     319            jb ALRM_MINS_UP, check_alarm_set
0261 E536       320            mov a, alarm_mins
0263 B45905     321            cjne a, #59H, add_alarm_min
0266 E4         322            clr a
0267 F536       323            mov alarm_mins, a
0269 80D5       324            sjmp check_alarm_hr
026B            325   add_alarm_min:
026B 2401       326            add a, #0x01
026D D4         327            da a
026E F536       328            mov alarm_mins, a
0270 8046       329            sjmp display
0272            330            
0272            331   check_alarm_set:
0272 209310     332            jb ALRM_SET, check_boot
0275 C002       333            push AR2
0277 7A50       333            mov R2, #80
0279 120039     333            lcall ?Wait_Milli_Seconds
027C D002       333            pop AR2
027E 209304     334            jb ALRM_SET, check_boot
0281 B202       335            cpl alarm_flag
0283 8033       336            sjmp display
0285            337            
0285            338   check_boot:
0285 20C528     339            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
0288 C002       340            push AR2
028A 7A32       340            mov R2, #50
028C 120039     340            lcall ?Wait_Milli_Seconds
028F D002       340            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0291 20C51C     341            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
0294 30C5FD     342            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
0297            343            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
0297            344            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
0297 C2CA       345            clr TR2                 ; Stop timer 2
0299 E4         346            clr a
029A            347            
029A            348            ;Reset milliseconds counter
029A F530       349            mov Count1ms+0, a
029C F531       350            mov Count1ms+1, a
029E            351            
029E            352            ;Reset current time
029E F533       353            mov BCD_secs, a
02A0 F534       354            mov BCD_mins, a
02A2 F532       355            mov BCD_hrs, a
02A4            356            
02A4            357            ;Reset alarm time
02A4 F535       358            mov alarm_hrs, a
02A6 F536       359            mov alarm_mins, a
02A8            360            
02A8            361            ;Reset flags
02A8 D201       362            setb morning_flag
02AA C202       363            clr alarm_flag
02AC            364            
02AC D2CA       365            setb TR2                ; Start timer 2
02AE 8006       366            sjmp loop_b             ; Display the new value
02B0            367   loop_a:
02B0 200003     368            jb one_second_flag, loop_b
02B3 0201EE     369            ljmp loop
02B6            370   loop_b:
02B6 C200       371       clr one_second_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
02B8            372   display:    
02B8            373       ;Display current time
02B8 C0E0       374            push acc
02BA 7407       374            mov a, #7
02BC 14         374            dec a
02BD 1200BF     374            lcall ?Set_Cursor_1 ; Select column and row
02C0 D0E0       374            pop acc
02C2 C000       375            push ar0
02C4 A832       375            mov r0, BCD_hrs
02C6 1200C4     375            lcall ?Display_BCD
02C9 D000       375            pop ar0
02CB C0E0       376            push acc
02CD 740A       376            mov a, #10
02CF 14         376            dec a
02D0 1200BF     376            lcall ?Set_Cursor_1 ; Select column and row
02D3 D0E0       376            pop acc
02D5 C000       377            push ar0
02D7 A834       377            mov r0, BCD_mins
02D9 1200C4     377            lcall ?Display_BCD
02DC D000       377            pop ar0
02DE C0E0       378            push acc
02E0 740D       378            mov a, #13
02E2 14         378            dec a
02E3 1200BF     378            lcall ?Set_Cursor_1 ; Select column and row
02E6 D0E0       378            pop acc     
02E8 C000       379            push ar0
02EA A833       379            mov r0, BCD_secs
02EC 1200C4     379            lcall ?Display_BCD
02EF D000       379            pop ar0 
02F1            380   
02F1            381            ;Display alarm time
02F1 C0E0       382            push acc
02F3 7407       382            mov a, #7
02F5 14         382            dec a
02F6 1200BD     382            lcall ?Set_Cursor_2 ; Select column and row
02F9 D0E0       382            pop acc
02FB C000       383            push ar0
02FD A835       383            mov r0, alarm_hrs
02FF 1200C4     383            lcall ?Display_BCD
0302 D000       383            pop ar0
0304 C0E0       384            push acc
0306 740A       384            mov a, #10
0308 14         384            dec a
0309 1200BD     384            lcall ?Set_Cursor_2 ; Select column and row
030C D0E0       384            pop acc
030E C000       385            push ar0
0310 A836       385            mov r0, alarm_mins
0312 1200C4     385            lcall ?Display_BCD
0315 D000       385            pop ar0
0317            386            
0317            387            ;Display alarm on/off
0317 C0E0       388            push acc
0319 740E       388            mov a, #14
031B 14         388            dec a
031C 1200BD     388            lcall ?Set_Cursor_2 ; Select column and row
031F D0E0       388            pop acc
0321 C0E0       389            push acc
0323 746F       389            mov a, #'o'
0325 12007E     389            lcall ?WriteData
0328 D0E0       389            pop acc
032A C0E0       390            push acc
032C 740F       390            mov a, #15
032E 14         390            dec a
032F 1200BD     390            lcall ?Set_Cursor_2 ; Select column and row
0332 D0E0       390            pop acc
0334 30021E     391            jnb alarm_flag, alarm_off
0337 C0E0       392            push acc
0339 746E       392            mov a, #'n'
033B 12007E     392            lcall ?WriteData
033E D0E0       392            pop acc
0340 C0E0       393            push acc
0342 7410       393            mov a, #16
0344 14         393            dec a
0345 1200BD     393            lcall ?Set_Cursor_2 ; Select column and row
0348 D0E0       393            pop acc
034A C0E0       394            push acc
034C 7420       394            mov a, #' '
034E 12007E     394            lcall ?WriteData
0351 D0E0       394            pop acc
0353 801C       395            sjmp display_AP_alarm
0355            396   alarm_off:
0355 C0E0       397            push acc
0357 7466       397            mov a, #'f'
0359 12007E     397            lcall ?WriteData
035C D0E0       397            pop acc
035E C0E0       398            push acc
0360 7410       398            mov a, #16
0362 14         398            dec a
0363 1200BD     398            lcall ?Set_Cursor_2 ; Select column and row
0366 D0E0       398            pop acc
0368 C0E0       399            push acc
036A 7466       399            mov a, #'f'
036C 12007E     399            lcall ?WriteData
036F D0E0       399            pop acc
0371            400            
0371            401   display_AP_alarm:
0371 C0E0       402            push acc
0373 740C       402            mov a, #12
0375 14         402            dec a
0376 1200BD     402            lcall ?Set_Cursor_2 ; Select column and row
0379 D0E0       402            pop acc
037B 30030B     403            jnb alarm_morning_flag, set_alarm_pm
037E C0E0       404            push acc
0380 7441       404            mov a, #'A'
0382 12007E     404            lcall ?WriteData
0385 D0E0       404            pop acc
0387 8009       405            sjmp display_AP
0389            406   set_alarm_pm:
0389 C0E0       407            push acc
038B 7450       407            mov a, #'P'
038D 12007E     407            lcall ?WriteData
0390 D0E0       407            pop acc
0392            408            
0392            409   display_AP:      
0392 C0E0       410            push acc
0394 740F       410            mov a, #15
0396 14         410            dec a
0397 1200BF     410            lcall ?Set_Cursor_1 ; Select column and row
039A D0E0       410            pop acc
039C 30010B     411            jnb morning_flag, set_pm
039F C0E0       412            push acc
03A1 7441       412            mov a, #'A'
03A3 12007E     412            lcall ?WriteData
03A6 D0E0       412            pop acc
03A8 8009       413            sjmp check_alarm_sound
03AA            414   set_pm:
03AA C0E0       415            push acc
03AC 7450       415            mov a, #'P'
03AE 12007E     415            lcall ?WriteData
03B1 D0E0       415            pop acc
03B3            416            
03B3            417   check_alarm_sound:
03B3 E4         418            clr a
03B4 F5F0       419            mov b, a
03B6 A201       420            mov c, morning_flag
03B8 92F0       421            mov b.0, c
03BA A203       422            mov c, alarm_morning_flag
03BC 92E0       423            mov acc.0, c
03BE B5F00F     424            cjne a, b, continue
03C1            425            
03C1 E534       426            mov a, BCD_mins
03C3 B5360A     427            cjne a, alarm_mins, continue
03C6            428            
03C6 E532       429            mov a, BCD_hrs
03C8 B53505     430            cjne a, alarm_hrs, continue
03CB 300202     431            jnb alarm_flag, continue
03CE D28C       432            setb TR0  ; Start timer 0
03D0            433   continue:
03D0 0201EE     434       ljmp loop
03D3            435   EN
